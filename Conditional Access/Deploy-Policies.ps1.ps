########################################################################
# Connect to the Microsoft Graph
Connect-MgGraph -Scopes "Policy.Read.All", "Policy.ReadWrite.ConditionalAccess", "User.Read.All", "Group.ReadWrite.All"
Import-Module Microsoft.Graph.Identity.SignIns
# End conect to Microsoft Graph
########################################################################

########################################################################
# Get the Teanant domain name
$domains = Get-MgDomain
$onMicrosoftDomain = $domains | Where-Object { $_.Id -like "*.onmicrosoft.com" -and $_.ID -notlike "*.mail.onmicrosoft.com" }

if ($onMicrosoftDomain) {
    $onMicrosoftDomain | ForEach-Object { Write-Output "Found .onmicrosoft.com domain: $($_.ID)" }
    $domainName = $onMicrosoftDomain.ID  # Select the first .onmicrosoft.com domain
} else {
    Write-Output "No .onmicrosoft.com domain found."
    return
}
# End getting the tenant domain name
########################################################################

########################################################################
# create the Break Glass Account UPN if they will be needed down the line
$BreakGlass1 = "BreakGlass1@$domainName"
$BreakGlass2 = "BreakGlass2@$domainName"
# End setting the Break Glass UPN's
########################################################################

########################################################################
# Fulntion to create a randomly generates 16 Character Password:
function Get-RandomPassword {
    param (
        [int]$length = 16
    )
    $chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()"
    -join ((1..$length) | ForEach-Object { $chars[(Get-Random -Maximum $chars.Length)] })
}

$password1 = Get-RandomPassword
$password2 = Get-RandomPassword
#End create 2 random passwords
########################################################################

########################################################################
# Create the two break glass accounts
$userInfo1 = @{
    accountEnabled = $true
    displayName = "Break Glass Admin 1"
    mailNickname = "breakglassadmin1"
    userPrincipalName = "$BreakGlass1"
    passwordProfile = @{
        forceChangePasswordNextSignIn = $false
        password = $password1
    }
}

$newUser1 = New-MgUser -BodyParameter $userInfo1
$UserID1 = $newUser1.ID



$userInfo2 = @{
    accountEnabled = $true
    displayName = "Break Glass Admin 2"
    mailNickname = "breakglassadmin2"
    userPrincipalName = "$BreakGlass2"
    passwordProfile = @{
        forceChangePasswordNextSignIn = $false
        password = $password2
    }
}

$newUser2 = New-MgUser -BodyParameter $userInfo2
$UserID2 = $newUser2.ID


# End create new Break Glass accounts
########################################################################

########################################################################
# Add teh Global Admin Role to the new Break Glass Accounts
$roleName = "Global Administrator"
$role = Get-MgDirectoryRole | Where-Object { $_.DisplayName -eq $roleName }

if (-not $role) {
    # If the role does not exist, create it
    $roleTemplate = Get-MgDirectoryRoleTemplate | Where-Object { $_.DisplayName -eq $roleName }
    $role = New-MgDirectoryRole -DisplayName $roleName -RoleTemplateId $roleTemplate.Id
}

# Assign the role to the user
$roleMember = @{
    "@odata.id" = "https://graph.microsoft.com/v1.0/users/$userId1"
}

New-MgDirectoryRoleMemberByRef -DirectoryRoleId $role.Id -BodyParameter $roleMember

Write-Output "Global Admin role assigned to user ID: $userId1"

$roleMember = @{
    "@odata.id" = "https://graph.microsoft.com/v1.0/users/$userId2"
}

New-MgDirectoryRoleMemberByRef -DirectoryRoleId $role.Id -BodyParameter $roleMember

Write-Output "Global Admin role assigned to user ID: $userId2"
# End add Global Admin role to Break Glass accounts
########################################################################


########################################################################
# Check to see if the test Group Exists if not create a test group

$groupName = "_Group - CA Test"
$group = Get-MgGroup -Filter "DisplayName eq '$groupName'"

if ($group) {
    # Group exists, store its ID in $GroupID
    $GroupID = $group.Id
    Write-Output "The targeted group ID for $groupName is: $GroupID which will be applied to the CA Policies"
} else {
    # Group does not exist, create the group
    $grpParams = @{
        description="Conditional Access Policy Test Group"
        displayName="_Group - CA Test"
        mailEnabled=$false
        securityEnabled=$true
        mailNickname="catest"
       }
       # Create the group based on the parameters set above which are pulled from the CSV
       $newGroup =   New-MgGroup @grpParams
     
    #New-MgGroup -DisplayName $groupName -MailEnabled $false -MailNickname $groupName -SecurityEnabled $true
    $GroupID = $newGroup.Id
    Write-Output "The target group $groupName for the CA Policies has been created. The group ID is: $GroupID"
}

# End Create Test Group
########################################################################
########################################################################
# VIP Group

$VIPgroupName = "_Group - VIP Test"
$VIPgroup = Get-MgGroup -Filter "DisplayName eq '$VIPgroupName'"

if ($VIPgroup) {
    # Group exists, store its ID in $GroupID
    $VIPGroupID = $VIPgroup.Id
    Write-Output "The targeted group ID for $VIPgroupName is: $VIPGroupID which will be applied to the CA Policies"
} else {
    # Group does not exist, create the group
    $VIPgrpParams = @{
        description="Conditional Access Policy Test Group for VIP Users"
        displayName="_Group - VIP Test"
        mailEnabled=$false
        securityEnabled=$true
        mailNickname="VIPcatest"
       }
       # Create the group based on the parameters set above which are pulled from the CSV
       $VIPnewGroup =   New-MgGroup @VIPgrpParams
     
    #New-MgGroup -DisplayName $groupName -MailEnabled $false -MailNickname $groupName -SecurityEnabled $true
    $VIPGroupID = $VIPnewGroup.Id
    Write-Output "The target group $VIPgroupName for the CA Policies has been created. The group ID is: $VIPGroupID"
}

# End Create Test Group
########################################################################

########################################################################
# Create a group for Privileged accounts

# Define the dynamic membership rule
$membershipRule = '((user.userPrincipalName -contains "admin_"))'
# Create the dynamic group
$PrivgrpName = "_Priv - Admin Users"
$grpParams = @{
    displayName = $PrivgrpName
    groupTypes = "DynamicMembership"
    mailEnabled = $false
    mailNickname = "adminusersgroup"
    membershipRule = $membershipRule
    membershipRuleProcessingState = "On"
    securityEnabled = $true
}
$PrivGroup = New-MgGroup @grpParams
$PrivGroupID = $PrivGroup.Id
# End create Privileged Users Group
########################################################################

########################################################################
# Sleep for 5 Seconds to allow the groups to be created
Start-Sleep -Seconds 5
# End Sleep
########################################################################
# Add the 2 Break Glass Accounts as owners for the newly created groups
# Add BreakGlass 1 as Group Owner
$Owner = Get-MgUser -UserID $BreakGlass1
$ownerId = $owner.Id

# Add the user as an owner of the group
$ownerRef = @{
    "@odata.id" = "https://graph.microsoft.com/v1.0/users/$ownerId"
}

New-MgGroupOwnerByRef -GroupId $groupId -BodyParameter $ownerRef
New-MgGroupOwnerByRef -GroupId $PrivGroupID -BodyParameter $ownerRef
New-MgGroupOwnerByRef -GroupId $VIPGroupID -BodyParameter $ownerRef


Write-Output "Owner added to the group. The owner ID is: $ownerId"

# Add BreakGlass 2 as Group Owner
$Owner = Get-MgUser -UserID $BreakGlass2
$ownerId = $owner.Id

# Add the user as an owner of the group
$ownerRef = @{
    "@odata.id" = "https://graph.microsoft.com/v1.0/users/$ownerId"
}

New-MgGroupOwnerByRef -GroupId $groupId -BodyParameter $ownerRef
New-MgGroupOwnerByRef -GroupId $PrivGroupID -BodyParameter $ownerRef
New-MgGroupOwnerByRef -GroupId $VIPGroupID -BodyParameter $ownerRef

Write-Output "Owner added to the group. The owner ID is: $ownerId"
# End Add owners
########################################################################





# Fetch the user and group details
#$userPrincipalNames = Get-MGUser -UserId admin@andykempdev.onmicrosoft.com
#$groupNames = Get-MgGroup -Filter "displayName eq '_Group - CA Test'"

$jsonFiles = Get-ChildItem -Path "C:\temp2" -Filter *.json



foreach ($file in $jsonFiles) {
    $jsonContent = Get-Content -Path $file.FullName -Raw | ConvertFrom-Json

    # Ensure the Conditions and Users properties exist
    if (-not $jsonContent.PSObject.Properties.Match("Conditions")) {
        $jsonContent | Add-Member -MemberType NoteProperty -Name "Conditions" -Value @{ Users = @{} }
    }
    if (-not $jsonContent.Conditions.PSObject.Properties.Match("Users")) {
        $jsonContent.Conditions | Add-Member -MemberType NoteProperty -Name "Users" -Value @{}
    }
    if (-not $jsonContent.Conditions.Users.PSObject.Properties.Match("ExcludeUsers")) {
        $jsonContent.Conditions.Users | Add-Member -MemberType NoteProperty -Name "ExcludeUsers" -Value @()
    }
    if (-not $jsonContent.Conditions.Users.PSObject.Properties.Match("IncludeGroups")) {
        $jsonContent.Conditions.Users | Add-Member -MemberType NoteProperty -Name "IncludeGroups" -Value @()
    }

    # Determine the group to include based on the policy name
    $policyName = $jsonContent.DisplayName
    if ($policyName -like "9*") 
    {
        $includeGroupIds = $PrivGroupID
        } elseif ($policyName -like "2*") {
        $includeGroupIds = $VIPGroupID
        } else {
        $includeGroupIds = $GroupID
    }

    # Update the JSON content to exclude the user IDs and include the appropriate group ID
    $jsonContent.Conditions.Users.ExcludeUsers = @($UserID1,$UserID2)
    $jsonContent.Conditions.Users.IncludeGroups = @($includeGroupIds)

    # Remove the 'id' field if it exists
    if ($jsonContent.PSObject.Properties.Match("id")) {
        $jsonContent.PSObject.Properties.Remove("id")
    }

    # Convert the updated JSON content back to JSON format
    $updatedJsonContent = $jsonContent | ConvertTo-Json -Depth 10

    # Create the conditional access policy
    New-MgIdentityConditionalAccessPolicy -BodyParameter $updatedJsonContent
}